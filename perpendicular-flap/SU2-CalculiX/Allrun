#!/bin/bash

# This script prepares and runs all the participants in one terminal,
# forwarding the solvers' output to log files.
# Alternatively, you may execute the scripts "runSolid" and "runFluid"
# in separate terminals.

# Run this script with "-parallel" for parallel simulations

# The script "Allclean" cleans-up the result and log files.
# Set up the run parameters:

# 1 for true, 0 for false
parallel=0
if [ "$1" = "-parallel" ]; then
    parallel=1
fi

# =============== Participant 1: Fluid ===========================
Participant1="Fluid"
Solver1="SU2_CFD"
nproc=2

# Run and get the process id
if [ $parallel -eq 1 ]; then
    echo "  Starting the ${Participant1} participant in parallel..."
    mpirun -np ${nproc} ${Solver1} Fluid/euler_config_coupled.cfg > ${Participant1}.log 2>&1 &
else
    echo "  Starting the ${Participant1} participant in serial..."
    ${Solver1} Fluid/euler_config_coupled.cfg > ${Participant1}.log 2>&1 &
fi
PIDParticipant1=$!

# =============== Participant 2: Solid ===========================
Participant2="Solid"
Solver2="ccx_preCICE"

# You can use CalculiX CGX to setup the structural simulation from sratch.
# This will re-generate the all.msh, fix1_beam.nam, interface_beam.nam files.
#
# # Prepare in silent mode
# echo "Preparing the ${Participant2} participant..."
# cd ${Participant2}
#     echo "  Executing cgx (provided by CalculiX, make sure this exists)..."
#     cgx -bg pre_flap.fbd > prepare_flap.log 2>&1
# cd ..

# Run
echo "  Starting the ${Participant2} participant..."
${Solver2} -i ${Participant2}/flap -precice-participant Calculix > ${Participant2}.log  2>&1 &
PIDParticipant2=$!


# =============== Wait for all the participants to finish =======
echo "Waiting for the participants to exit..., PIDs: ${PIDParticipant1}, ${PIDParticipant2}"
echo "(you may run 'tail -f ${Participant1}.log' in another terminal to check the progress)"

echo "To interrupt the simulation, press 'c'. Ctrl+C will only send the processes to the background."
while [ -e /proc/${PIDParticipant1} ]; do
    read -r -t1 -n1 input
    if [ "$input" = "c" ]; then
        kill ${PIDParticipant1}
        kill ${PIDParticipant2}
        false
    fi
done

if [ $? -ne 0 ] || [ "$(grep -c -E "error:" ${Participant1}.log)" -ne 0 ] || [ "$(grep -c -E "error:" ${Participant2}.log)" -ne 0 ]; then
    echo ""
    echo "Something went wrong... See the log files for more."
    # Precaution
    kill ${PIDParticipant1}
    kill ${PIDParticipant2}
else
    echo ""
    echo "The simulation completed! (check for any errors)"
fi
