FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{

    cylinder
    {
        type            noSlip;
    }

    flap
    {
        type            movingWallVelocity;
        value           uniform (0 0 0);
    }

    top
    {
        type            noSlip;
    }

    bottom
    {
        type            noSlip;
    }

    inlet
    {
        // Time-varying parabolic inlet profile
        type            codedFixedValue;
        value           uniform (1 0 0);
        name            parabolicVelocity;

        code
        #{
            const vectorField& Cf = patch().Cf();
            vectorField& field = *this;

            const scalar pi = constant::mathematical::pi;
            const scalar Umean = 2.0;
            const scalar H = 0.41;    // channel height
            const scalar H_2 = H * H; // equals 0.1681
            const scalar t = this->db().time().value();
            // ramp up below 2 seconds
            if (t < 2)
            {
                forAll(Cf, faceI)
                {
                    const scalar y = Cf[faceI].y();
                    field[faceI] = vector((1.5 * Umean * 4.0 / H_2) * y * (H - y) * ((1 - cos((pi / 2) * t)) / 2), 0, 0);
                }
            }
            else
            {
                forAll(Cf, faceI)
                {
                    const scalar y = Cf[faceI].y();
                    field[faceI] = vector((1.5 * Umean * 4.0 / H_2) * y * (H - y), 0, 0);
                }
            }
        #};
    }

    outlet
    {
        type            zeroGradient;
    }

    front
    {
        type            empty;
    }
    back
    {
        type            empty;
    }
}
