FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1.;

x0 -3.; 
x1 -1.05;
x2 -0.95;
x3 0.95;
x4 1.05;
x5 3.;

z0 0.;
z1 1.;
z2 4.;

w 0;
vertices
(
    ($x0 $z0   $w )         // 0
    ($x1 $z0   $w )         // 1
    ($x2 $z0   $w )         // 2
    ($x3 $z0   $w )         // 3
    ($x4 $z0   $w )         // 4
    ($x5 $z0   $w )         // 5
    
    ($x0 $z1   $w )         // 6
    ($x1 $z1   $w )         // 7
    ($x2 $z1   $w )         // 8
    ($x3 $z1   $w )         // 9
    ($x4 $z1   $w )         // 10
    ($x5 $z1   $w )         // 11
    
    ($x0 $z2   $w )         // 12
    ($x1 $z2   $w )         // 13
    ($x2 $z2   $w )         // 14
    ($x3 $z2   $w )         // 15
    ($x4 $z2   $w )         // 16
    ($x5 $z2   $w )         // 17
    
    ($x0 $z0   1 )         // 18
    ($x1 $z0   1 )         // 19
    ($x2 $z0   1 )         // 20
    ($x3 $z0   1 )         // 21
    ($x4 $z0   1 )         // 22
    ($x5 $z0   1 )         // 23
    ($x0 $z1   1 )         // 24
    ($x1 $z1   1 )         // 25
    ($x2 $z1   1 )         // 26
    ($x3 $z1   1 )         // 27
    ($x4 $z1   1 )         // 28
    ($x5 $z1   1 )         // 29
    ($x0 $z2   1 )         // 30
    ($x1 $z2   1 )         // 31
    ($x2 $z2   1 )         // 32
    ($x3 $z2   1 )         // 33
    ($x4 $z2   1 )         // 34
    ($x5 $z2   1 )         // 35
         

);

// Grading
h1 20;      
h2 4;
h3 25;       
v1 20;      
v2 45;

blocks
(
    hex (   0   1   7  6   18   19   25   24  )
    ($h1 $v1 1 )
    simpleGrading (0.5 1 1)

    hex (   2   3   9   8  20  21  27  26  )
    ($h3 $v1 1)
    simpleGrading (1 1 1)

    hex (   4   5   11  10  22  23  29  28  )
    ($h1 $v1 1)
    simpleGrading (2 1 1)
    
    
    hex (  6  7  13  12  24  25   31  30 )
    ($h1 $v2 1 )
    simpleGrading (0.5 1.2 1)

    hex (  8  9  15  14  26  27  33  32  )
    ($h3 $v2 1)
    simpleGrading (1 1.2 1)

    hex (  10  11  17  16  28  29  35  34  )
    ($h1 $v2 1)
    simpleGrading (2 1.2 1)
    
    
    hex ( 7  8  14  13  25 26  32  31  )
    ($h2 $v2 1)
    simpleGrading (1 1.2 1)    

    hex ( 9  10  16  15  27  28   34  33 )
    ($h2 $v2 1)
    simpleGrading (1 1.2 1)


);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (  0   6  24  18  )
            (  6  12  30  24  )
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (   5   11  29  23  )
            (   11  17  35  29  )
        );
    }
    
    flap1
    {
        type wall;
        faces
        (
            (   1   7   25  19  )
            (   7   8   26  25  )
            (   8   2   20  26  ) //reverse

        );
    }
    
    flap2
    {
        type wall;
        faces
        (            
            (   3   9   27  21  )
            (   9   10  28  27  )
            (   10  4   22  28  ) //reverse

        );
    }
    
      
    upperWall
    {
        type wall;
        faces
        (
            (   12  13  31  30   )
            (   13  14  32  31   )
            (   14  15  33  32   )
            (   15  16  34  33   )
            (   16  17  35  34   )
        );
    }
    lowerWall
    {
        type wall;
        faces
        (
            (   0   1   19  18  )
            (   2   3   21  20  )
            (   4   5   23  22  )
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (   0   1   7   6   ) //front bottom
            (   2   3   9   8   )
            (   4   5   11  10  )
            (   6   7   13  12  ) //front top
            (   7   8   14  13  ) 
            (   8   9   15  14  )
            (   9   10  16  15  )
            (   10  11  17  16  )
            
            
            (   18  19  25  24  ) //back bottom
            (   20  21  27  26  )
            (   22  23  29  28  )
            (   24  25  31  30  ) // back top
            (   25  26  32  31  )
            (   26  27  33  32  )
            (   27  28  34  33  )
            (   28  29  35  34  )
        );
    }
);

// ************************************************************************* //
