FoamFile {
    version 2.0;
    class dictionary;
    object fvSchemes;
    format ascii;
}
ddtSchemes {
    default steadyState;
}
gradSchemes {
    grad(e) cellLimited Gauss linear 1.0;
    default cellLimited Gauss linear 1.0;
    grad(p_rgh) cellLimited Gauss linear 1.0;
    grad(U) cellLimited Gauss linear 1.0;
    grad(h) cellLimited Gauss linear 1.0;
    grad(rho) cellLimited Gauss linear 1.0;
}
divSchemes {
    div(phi,e) bounded Gauss upwind;
    div(phi,h) bounded Gauss upwind;
    default Gauss linear;
    div((muEff*dev2(T(grad(U))))) Gauss linear;
    div(phiv,p) bounded Gauss upwind;
    div(phi,K) bounded Gauss upwind;
    div(phi,U) bounded Gauss upwind;
}
laplacianSchemes {
    laplacian(muEff,U) Gauss linear corrected;
    laplacian(rhorAUf,p_rgh) Gauss linear corrected;
    default Gauss linear corrected;
    laplacian(alphaEff,e) Gauss linear corrected;
    laplacian(alphaEff,h) Gauss linear corrected;
    laplacian(alpha,h) Gauss linear corrected;
}
interpolationSchemes {
    interpolate(grad(h)) linear;
    default linear;
    interpolate((thermo:rho*Cp)) linear;
    interpolate((rho*rAU)) linear;
    interpolate(rho) linear;
    interpolate(kappa) linear;
    interpolate(mag(Kappa)) linear;
    interpolate((rho*HbyA)) linear;
    interpolate((rho_0*U_0)) linear;
}
snGradSchemes {
    default corrected;
    snGrad(rho) corrected;
    snGrad(p_rgh) corrected;
}
fluxRequired {
    default no;
    p_rgh ;
}
